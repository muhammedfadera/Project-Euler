"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle:
T_n = n(n + 1) / 2
1, 3, 6, 10, 15, ...

Pentagonal:
P_n = n(3n - 1) / 2
1, 5, 12, 22, 35, ...

Hexagonal:
H_n = n(2n - 1)
1, 6, 15, 28, 45, ...

It can be verified that T_285 = P_165 = H_143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

"""

#%%
m = 165
n = 285
k = 143
# (1 + 4*(3*m**2 - m))**0.5
# (1 + 12*(n**2 + n))**0.5
# (1 + 4*(n**2 + n))**0.5
# (1 + 8*(2*k**2 - k))**0.5
# (1 + 24*(2*k**2 - k))**0.5
# Approach starting from k = 143, we increment 
# k by 1 and check if k satisfy the appropriate above 
# condition, then we start choose m = k and then increase it until
# it also satisfy the appropriate condition

def is_int(x):
    return (int(x) - x) == 0

def triangular(n):
    return n*(n + 1)/2

def pentagonal(m):
    return m*(3*m-1)/2
def hexagonal(k):
    return k*(2*k-1)

K = []
M = []
N = []
k = 144
cond = False

while not cond:
    K_cond1 = (1 + 8*(2*k**2 - k))**0.5
    K_cond2 = (1 + 24*(2*k**2 - k))**0.5
    nk, rk1 = divmod(-1 + K_cond1, 2)
    mk, rk2 = divmod(1+K_cond2, 6)
    k_cond = False
    # print(f"Currently trying k = {k}")
    if is_int(K_cond1) and is_int(K_cond2) and rk1 == 0 and rk2 == 0:
        # print(f"found potential k = {k}")
        H_k = hexagonal(k)
        k_cond = True
        m = k+1
        P_m = pentagonal(m)
        m_cond = False
        while P_m <= H_k and not m_cond:
            M_cond1 = (1 + 4*(3*m**2 - m))**0.5
            if M_cond1 == K_cond1:
                # print(f"found potential m = {m}")
                m_cond = True
                n = m + 1
                T_n = triangular(n)
                n_cond = False
                while T_n <= P_m and not n_cond:
                    N_cond1 = (1 + 4*(n**2 + n))**0.5
                    N_cond2 = (1 + 12*(n**2 + n))**0.5
                    if N_cond1 == M_cond1 and is_int(N_cond2):
                        n_cond = True
                        T_n = triangular(n)
                        P_m = pentagonal(m)
                        H_k = hexagonal(k)
                        if T_n == P_m and T_n == H_k and P_m == H_k:
                            cond = True
                            print(f"The result is {int(T_n)} which occurs at",
                                  f"(n, m, k) = ({n}, {m}, {k})")
                            break
                    else:
                        n += 1
            else:
                m += 1
    k += 1


# %%
from math import isqrt as sqrt
# Start from the hexagonal number 143

c = 143

while True:
    c += 1
    a = 2*c - 1
    expression = 12 * a * (a + 1) + 1
    exp_sqrt = sqrt(expression)
    if exp_sqrt**2 != expression or exp_sqrt % 6 != 5: 
        continue
    b = (exp_sqrt + 1) // 6
    print(a * (a + 1) // 2)
    break
# %%
